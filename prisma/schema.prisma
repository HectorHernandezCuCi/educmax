generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(uuid())
  name      String
  lastname  String
  email     String       @unique
  password  String
  age       Int
  role      String       @default("teacher")
  createdAt DateTime     @default(now())
  profilePicture String // URL de la foto de perfil
  
  teacherGroups TeacherGroup[] // Relación inversa
  posts      Post[]        // Relación con los posts creados por el usuario
  likes      Like[]        // Relación con los likes dados por el usuario
  comments   Comment[]     // Relación con los comentarios hechos por el usuario
}

model Group {
  id          String        @id @default(uuid())
  name        String
  grade       String
  studentCount Int
  teacher     String?
  startDate   DateTime
  endDate     DateTime
  notes       String?
  
  studentGroups StudentGroup[] // Relación muchos a muchos con estudiantes
  teacherGroups TeacherGroup[] // Relación con los profesores
}

model Student {
  id        String   @id @default(uuid())
  name      String
  listNumber Int
  studentGroups StudentGroup[] // Relación muchos a muchos con grupos
}

model TeacherGroup {
  id        Int    @id @default(autoincrement())
  userId    String // Relaciona al profesor
  groupId   String // Relaciona al grupo
  
  user      User   @relation(fields: [userId], references: [id])
  group     Group  @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model StudentGroup {
  id        Int      @id @default(autoincrement())
  studentId String   // Relaciona al estudiante
  groupId   String   // Relaciona al grupo

  student   Student  @relation(fields: [studentId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  userId    String   // Relaciona al usuario que creó el post
  filePath  String?  // Ruta del archivo subido

  user      User     @relation(fields: [userId], references: [id])
  likes     Like[]   // Relación con los likes recibidos por el post
  comments  Comment[]      // Relación con los comentarios recibidos por el post
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String   // Relaciona al usuario que dio el like
  postId    String   // Relaciona al post que recibió el like

  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String   // Relaciona al usuario que hizo el comentario
  postId    String   // Relaciona al post que recibió el comentario
  parentCommentId String? // Relaciona al comentario padre para comentarios anidados
  parentComment   Comment? @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReplies")

  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}
